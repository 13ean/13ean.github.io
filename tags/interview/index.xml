<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on 13ean&#39;s Github Page</title>
    <link>https://13ean.github.io/tags/interview/</link>
    <description>Recent content in interview on 13ean&#39;s Github Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Thu, 28 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://13ean.github.io/tags/interview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据库系统</title>
      <link>https://13ean.github.io/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://13ean.github.io/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</guid>
      <description>视图 视图是一个虚拟表，其内容由查询定义。视图一经定义便存入数据库中。视图中的数据只是存放在基本表中的数据。
视图作用  简单性：视图可以简化用户的操作 安全性：通过视图用户只能查询和修改他们所看到的数据 逻辑数据独立性：视图可以帮助用户屏蔽真实表结构变化带来的影响  完整性约束 关系完整性约束是为保证数据库中数据的正确性和相容性，对关系模型提出的某种约束条件或规则。完整性通常包括域完整性，实体完整性、参照完整性和用户定义完整性，其中域完整性，实体完整性和参照完整性，是关系模型必须满足的完整性约束条件
 域完整性：保证指定列的数据具有正确的数据类型、格式和有效的数据范围 实体完整性：指关系的主关键字不能重复也不能取“空值”，保证数据库中数据表的每一个特定实体的记录都是唯一的 参照完整性：定义建立关系之间联系的主关键字与外部关键字引用的约束条件。当增加、修改或删除数据库表中记录时，可以借助参照完整性来保证相关联表之间数据的一致性 用户定义完整性：由用户定义的完整性。用户定义完整性可以定义不属于其他任何完整性分类的特定业务规则  索引 数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。
索引的优点  通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性 可以大大加快数据的检索速度，这也是创建索引的最主要的原因 可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义 在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间 通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能  索引的缺点  创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加 索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大 当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度  设置索引的原则 应设置索引的情况  较频繁查询的列上创建索引 在经常需要根据范围进行搜索的列上创建索引 在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构 在经常用在连接的列上 在经常需要排序的列上创建索引，因为索引已经排序 在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度  不应设置索引的情况  在查询中很少使用或者参考的列不应该创建索引 选择性很差的列，即这些列取值很少 当修改性能远远大于检索性能时，不应该创建索引  索引分类：  唯一索引：唯一索引不允许两行具有相同的索引值 主键索引：为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的，并且不能为空 聚集索引(Clustered)：表中各行的物理顺序与索引顺序相同，每个表只能有一个 非聚集索引(Non-clustered)：非聚集索引指定表种记录的逻辑顺序。数据存储在一个位置，索引存储在另一个位置，索引中包含指向数据存储位置指针  索引类型 顺序索引 使用B树或者B+树作为其索引结构
散列索引 哈希索引（hash index）基于哈希表实现。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code），哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。对于hash相同的，采用链表的方式解决冲突。
优点：
 访问哈希索引的数据非常快  限制：
 哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行 哈希索引数据并不是按照索引值顺序存储的，所以也就无法用于排序 哈希索引数据并不是按照索引值顺序存储的，所以也就无法用于排序 哈希索引只支持等值比较查询，包括=、IN()、&amp;lt;&amp;gt;，也不支持任何范围查询 当出现哈希冲突的时候，存储引擎必须遍历链表中所有的行指针，逐行进行比较，直到找到所有符合条件的行  散列索引与顺序索引的区别    Hash索引 顺序索引     无序 有序   只支持点查询 支持点查询和范围查询    存储过程 存储过程是一个预编译的SQL语句。</description>
    </item>
    
  </channel>
</rss>